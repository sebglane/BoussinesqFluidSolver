/**
@mainpage Documentation of the Boussinesq fluid solver
@author Sebastian Glane
\tableofcontents

This github repository contains a suite of solvers for incompressible flow problems. The solvers apply an implcit-explicit timestepping scheme and a pressure correction scheme. The following types of problems can be solved with the current library
  - Convection-diffusion equation (with a prescribed velocity field),
  - Incompessible Navier-Stokes equations,
  - Boussinesq-Overbeck convection,
  - Rotating Boussinesq-Overbeck convection,
  - Incompressible magnetohydrodynamics,
  - Rotating incompressible magnetohyrodynamics.
  
The objective is to finally implement a solver which is capable of solving dynamo problem inside spherical annulus. Solvers of the Navier-Stokes equation, the heat conduction equation and the magnetic induction equation are the building blocks to achieve this and are coupled in order to solve the dynamo problem.

@section Introduction

In the following, the equations which are governing the different problems stated above will be presented.

@subsection ConvectionDiffusion Convection diffusion equation

The initial boundary value problem of the convection-diffusion equation reads
\f[\begin{equation*}
    \begin{aligned}
         \pd{c}{t} + \bs{v} \cdot \nabla c &= \nabla\cdot\left( D \nabla c \right) + r, \quad & &\forall \left( \bs{x}, t\right) \in \Omega \times \left[ 0, T \right]\,, \\
         c(\bs{x}, t) &= c(\bs{x}, t), \quad & &\forall \left( \mathbf{x}, t\right) \in \Gamma_\mathrm{D} \times \left[ 0, T \right]\,, \\
         \bs{n} \cdot D\nabla c &= j(\bs{x}, t), \quad & &\forall \left( \mathbf{x}, t\right) \in \Gamma_\mathrm{N} \times \left[ 0, T \right]\,, \\
         \bs{n} \cdot D\nabla c + f(\bs{x}, t) c(\bs{x}, t) &= g(\bs{x}, t), \quad & &\forall \left( \mathbf{x}, t\right) \in \Gamma_\mathrm{R} \times \left[ 0, T \right]\,, \\
         c(\bs{x}, t=0)&=c_0(\bs{x}), \quad & & \forall \mathbf{x} \in \Omega\,,
	\end{aligned}
\end{equation*}
\f]
where \f$c\f$ is a scalar field, for example, the temperature \f$T\f$, the entropy \f$s\f$, or a concentration. Moreover, \f$D\f$ denotes a diffusion coefficient and \f$r\f$ a source term. Here, 

@section Code

\code{.cpp}
enum GravityProfile
{
    Constant,               /*!< Constant gravity model. */
    Linear,                 /*!< Linear gravity model. */
    default_profile=Linear  /*!< Default is the linear model */
};
\endcode

A table 
<center>
<table>
<caption id="multi_row">User defined variables</caption>
<tr><th>FORTRAN Variable      <th> Description
<tr><td><code>CF</code>       <td> Concentration field \f$c\f$ at the current step.
<tr><td><code>MU</code>       <td> Chemcial potential field \f$\mu\f$ at the current step.
</table>
</center>

*/
